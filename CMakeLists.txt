cmake_minimum_required(VERSION 3.12)

project(libcontacts
  VERSION 0.1
  DESCRIPTION "Library to manage contacts as a network"
  LANGUAGES CXX)

include(GNUInstallDirs)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")


# Encourage user to specify a build type (e.g. Release, Debug, etc.), otherwise set it to Release.
if(NOT CMAKE_CONFIGURATION_TYPES)
  if(NOT CMAKE_BUILD_TYPE)
    message(STATUS "Setting build type to 'Release' as none was specified.")
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Release")
  endif()
endif()

add_executable(minimal_example
  main.cpp)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules")

set(CMAKE_BOOST_COMPONENTS "system" "thread")
find_package(Boost REQUIRED COMPONENTS ${CMAKE_BOOST_COMPONENTS})

find_package(OpenSSL REQUIRED)
include_directories(${OPENSSL_INCLUDE_DIR})

find_package(Threads REQUIRED)

find_package(CURL REQUIRED)

include(FindVelocypack)
find_package(Velocypack)

if (NOT ${VELOCYPACK_FOUND})
  message(FATAL_ERROR "Velocypack not found. Clone from https://github.com/arangodb/velocypack and install it")
endif()

include(ECMEnableSanitizers)




# This is the "physical" (i.e. real) name of the library.
# The actual file name of the library built is constructed based on conventions
# of the native platform, such as lib<LIBRARY_TARGET_NAME>.a,
# lib<LIBRARY_TARGET_NAME>.dylib or <LIBRARY_TARGET_NAME>.lib.
#
# In order to use a library name that is not the same as the `EXPORT` (in the
# `install` command), it is necessary to pass the `FIRST_TARGET` option to
# `install_basic_package_files` in the main CMakeLists.txt file.
# In this case the project name is used for both, therefore it is not necessary.
set(LIBRARY_TARGET_NAME ${PROJECT_NAME})

# List of CPP (source) library files.
set(${LIBRARY_TARGET_NAME}_SRC
  src/query.cpp
  )

# List of HPP (header) library files.
set(${LIBRARY_TARGET_NAME}_HDR
  include/person.h
  include/query.h
  )

# You can add an external dependency using the find_package() function call
# See: https://cmake.org/cmake/help/latest/command/find_package.html
# Note that the imported objects resulting from the find_package() depends upon
# the configuration files generated by the developer of the library.
# These imported objects can be either:
#  - variables that must be used to include directories and/or link libraries
#    with function calls like target_include_directories() and/or
#    target_link_libraries();
#  - a CMake target that must only be linked using target_link_libraries() and
#    CMake will take care of including and/or linking the appropriate
#    directories and/or libraries.
# See: https://cmake.org/cmake/help/latest/command/target_include_directories.html
# See: https://cmake.org/cmake/help/latest/command/target_link_libraries.html
# For example:
# find_package(FooPackage) may import either
#  - variables: FooPackage_INCLUDE_DIRS and FooPackage_LIBRARIES
#  - target: FooPackage::FooPackage

# Adds a library target called ${LIBRARY_TARGET_NAME} to be built from the
# source and header files listed in the command invocation.
add_library(${LIBRARY_TARGET_NAME}
  ${${LIBRARY_TARGET_NAME}_SRC}
  ${${LIBRARY_TARGET_NAME}_HDR})

# Set two minimum target properties for the library.
# See https://cmake.org/cmake/help/latest/command/set_target_properties.html
# Properties are: 1) Library version number 2) list of corresponding public headers
set_target_properties(${LIBRARY_TARGET_NAME} PROPERTIES VERSION       ${${PROJECT_NAME}_VERSION}
  PUBLIC_HEADER "${${LIBRARY_TARGET_NAME}_HDR}")

# Specify include directories for both compilation and installation process.
# The $<INSTALL_PREFIX> generator expression is useful to ensure to create 
# relocatable configuration files, see https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html#creating-relocatable-packages
target_include_directories(${LIBRARY_TARGET_NAME} PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
  "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")

target_link_libraries(libcontacts
  fuerte
  ${VELOCYPACK_LIBRARIES}
  ${CURL_LIBRARIES}
  ${Boost_LIBRARIES}
  ${OPENSSL_LIBRARIES}
  ${CMAKE_THREAD_LIBS_INIT}
  )
# If you used find_package() you need to use target_include_directories() and/or
# target_link_libraries(). As explained previously, depending on the imported
# objects, you may need to call either or both:
# - with imported variable:
#   target_include_directories(${LIBRARY_TARGET_NAME} ${FooPackage_INCLUDE_DIRS})
#   target_link_libraries(${LIBRARY_TARGET_NAME} ${FooPackage_LIBRARIES})
# - with imported target:
#   target_link_libraries(${LIBRARY_TARGET_NAME} FooPackage_LIBRARIES::FooPackage_LIBRARIES)

# Specify installation targets, typology and destination folders.
install(TARGETS ${LIBRARY_TARGET_NAME}
  EXPORT  ${PROJECT_NAME}
  LIBRARY       DESTINATION "${CMAKE_INSTALL_LIBDIR}"                            COMPONENT shlib
  ARCHIVE       DESTINATION "${CMAKE_INSTALL_LIBDIR}"                            COMPONENT lib
  RUNTIME       DESTINATION "${CMAKE_INSTALL_BINDIR}"                            COMPONENT bin
  PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${LIBRARY_TARGET_NAME}" COMPONENT dev)







target_link_libraries(minimal_example
  libcontacts
  fuerte
  ${VELOCYPACK_LIBRARIES}
  ${CURL_LIBRARIES}
  ${Boost_LIBRARIES}
  ${OPENSSL_LIBRARIES}
  ${CMAKE_THREAD_LIBS_INIT}
  )
